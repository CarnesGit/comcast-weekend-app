{"version":3,"sources":["Components/Weather/Weather.js","Components/LocationInput/LocationInput.js","App.js","serviceWorker.js","index.js"],"names":["Weather","data","location","icon","weather","JSON","stringify","replace","className","key","id","name","Math","round","main","temp","feels_like","temp_max","temp_min","description","src","alt","LocationInput","state","locationInputField","onSubmit","e","preventDefault","props","submitFunction","onChange","setState","target","value","placeholder","this","type","Component","App","fetchApi","api","fetch","then","res","json","catch","console","log","weatherData","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0UAsCmBA,G,MAnCC,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,EAAOF,EAAKG,SAASC,KAAKC,UAAUL,EAAKG,QAAQ,GAAGD,MAAMI,QAAQ,KAAK,IAE3E,OAAgB,OAATN,GACL,6BACE,gCAAQ,wBAAIO,UAAU,UAAd,wBACR,yBAAKA,UAAU,OAAOC,IAAKR,EAAKS,IAC9B,yBAAKF,UAAU,aACb,gCAAQ,wBAAIE,GAAG,YAAYF,UAAU,cAA7B,0BACR,gCAAQ,wBAAIA,UAAU,cAAcP,EAAKU,OACzC,gCAAQ,yCAAeT,IACvB,6BACA,yBAAKM,UAAU,OACb,yBAAKA,UAAU,oBACb,gCAAQ,oDACR,gCAAQ,2BAAII,KAAKC,MAAMZ,EAAKa,MAAMT,KAAKC,UAAUL,EAAKa,KAAKC,OAAS,WACpE,gCAAQ,2CACR,gCAAQ,2BAAIH,KAAKC,MAAMZ,EAAKa,MAAMT,KAAKC,UAAUL,EAAKa,KAAKE,aAAe,WAC1E,gCAAQ,4CACR,gCAAQ,2BAAIJ,KAAKC,MAAMZ,EAAKa,MAAMT,KAAKC,UAAUL,EAAKa,KAAKG,WAAa,WACxE,gCAAQ,2CACR,gCAAQ,2BAAIL,KAAKC,MAAMZ,EAAKa,MAAMT,KAAKC,UAAUL,EAAKa,KAAKI,WAAa,YAE1E,yBAAKV,UAAU,oBACb,gCAAQ,4CACR,gCAAQ,wBAAIE,GAAG,cAAcF,UAAU,cAAcP,EAAKG,SAASC,KAAKC,UAAUL,EAAKG,QAAQ,GAAGe,aAAaZ,QAAQ,KAAK,MAC5H,gCAAQ,yBAAKa,IAAK,oCAAoCjB,EAApC,UAAoDkB,IAAI,yB,OCU7EC,G,iNAnCbC,MAAQ,CACNC,mBAAoB,I,EAGtBC,SAAW,SAACC,GACVA,EAAEC,iBACF,EAAKC,MAAMC,eAAe,EAAKN,MAAMC,qB,EAGvCM,SAAW,SAACJ,GACV,EAAKK,SAAL,eAAgBL,EAAEM,OAAOrB,KAAOe,EAAEM,OAAOC,S,wEAGhC,IACDC,EAAgBC,KAAKP,MAArBM,YACR,OACE,0BAAMT,SAAUU,KAAKV,UACnB,gCACE,2BACEd,KAAK,qBACLmB,SAAUK,KAAKL,SACftB,UAAU,WACV0B,YAAaA,KAEjB,gCACE,2BAAO1B,UAAU,YAAY4B,KAAK,SAASzB,KAAK,qBAAqBsB,MAAM,iB,GA1BzDI,cCyCbC,G,iNAtCbf,MAAQ,CACNtB,KAAM,GACNC,SAAU,S,EAOZqC,SAAW,WACT,IAAIC,EAAM,uDAAyD,EAAKjB,MAAMrB,SAAW,4BAEzFuC,MAAMD,EADS,oCAEdE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACzC,GACL,EAAK8B,SAAS,CAAE9B,KAAMA,OAEvB4C,MAAMC,QAAQC,M,EAGjBlB,eAAiB,SAAC3B,GAChB,EAAK6B,SAAS,CAAC7B,SAAUA,IAAW,kBAAM,EAAKqC,e,mFAf/CJ,KAAKI,a,+BAmBL,IAAIS,EAAcb,KAAKZ,MAAMtB,KAC7B,OACE,6BACE,kBAAC,EAAD,CAASA,KAAM+C,EAAa9C,SAAUiC,KAAKZ,MAAMrB,WACjD,kBAAC,EAAD,CACEgC,YAAa,kBACbL,eAAgBM,KAAKN,sB,GAhCbQ,cCOEY,QACW,cAA7BC,OAAOhD,SAASiD,UAEe,UAA7BD,OAAOhD,SAASiD,UAEhBD,OAAOhD,SAASiD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.511f42d8.chunk.js","sourcesContent":["import React from 'react'\nimport './Weather.css'\n\n    const Weather = ({ data, location }) => { \n      let icon = data.weather&&JSON.stringify(data.weather[0].icon).replace(/\"/g,\"\");\n      \n      return data !== null && (\n        <div>\n          <center><h1 className='Header'>Weather By Zip Code</h1></center>\n          <div className=\"card\" key={data.id}>\n            <div className=\"card-body\">\n              <center><h4 id='HeaderLow' className=\"card-title\">Current Conditions In</h4></center>\n              <center><h4 className=\"card-title\">{data.name}</h4></center>\n              <center><h4>Zip Code: {location}</h4></center>\n              <hr/>\n              <div className=\"row\">\n                <div className=\"col-lg-6 Display\">\n                  <center><h4>Current Temperature</h4></center>\n                  <center><p>{Math.round(data.main&&JSON.stringify(data.main.temp)) + '\\u00B0 F'}</p></center>\n                  <center><h4>Feels Like</h4></center>\n                  <center><p>{Math.round(data.main&&JSON.stringify(data.main.feels_like)) + '\\u00B0 F'}</p></center>\n                  <center><h4>Todays High</h4></center>\n                  <center><p>{Math.round(data.main&&JSON.stringify(data.main.temp_max)) + '\\u00B0 F'}</p></center>\n                  <center><h4>Todays Low</h4></center>\n                  <center><p>{Math.round(data.main&&JSON.stringify(data.main.temp_min)) + '\\u00B0 F'}</p></center>\n                </div>\n                <div className=\"col-lg-6 Display\">\n                  <center><h4>Description</h4></center>\n                  <center><h3 id='Description' className='Capitalize'>{data.weather&&JSON.stringify(data.weather[0].description).replace(/\"/g,\"\")}</h3></center>\n                  <center><img src={`http://openweathermap.org/img/wn/`+icon+`@2x.png`} alt='weather icon'/></center>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    };\n\n    export default Weather","import React, { Component } from 'react';\nimport './LocationInput.css'\n\nclass LocationInput extends Component {\n  state = {\n    locationInputField: '',\n  }\n  \n  onSubmit = (e) => {\n    e.preventDefault();\n    this.props.submitFunction(this.state.locationInputField);\n  };\n  \n  onChange = (e) => {\n    this.setState({[e.target.name]: e.target.value});\n  };\n  \n  render () {\n    const { placeholder } = this.props;\n    return (\n      <form onSubmit={this.onSubmit}>\n        <center>\n          <input \n            name='locationInputField' \n            onChange={this.onChange} \n            className='ZipInput' \n            placeholder={placeholder}/>\n        </center>\n        <center>\n          <input className='ZipButton' type='submit' name='locationInputField' value='Submit'/>\n        </center>\n      </form>\n    );\n  };\n};\n    \n        \n    \n\nexport default LocationInput;","import React, { Component } from 'react';\nimport Weather from './Components/Weather/Weather';\nimport LocationInput from './Components/LocationInput/LocationInput';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    data: [],\n    location: '19805'\n  }\n\n  componentDidMount() {\n    this.fetchApi();\n  }\n\n  fetchApi = () => {\n    let api = 'https://api.openweathermap.org/data/2.5/weather?zip=' + this.state.location + ',us&units=imperial&appid=';\n    const apiKey = 'e3e26770ea91f1526f1d91e4b4212507';\n    fetch(api + apiKey)\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ data: data });\n    })\n    .catch(console.log);\n  };\n\n  submitFunction = (location) => {\n    this.setState({location: location}, () => this.fetchApi());\n  };\n\n  render() {\n    let weatherData = this.state.data;\n    return (\n      <div>\n        <Weather data={weatherData} location={this.state.location}/>\n        <LocationInput\n          placeholder={' Change Zipcode'}\n          submitFunction={this.submitFunction}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}